--- a/DentalAI/Services/DetectionFactory.swift
+++ b/DentalAI/Services/DetectionFactory.swift
@@ -37,15 +37,15 @@ class DetectionFactory {
     
     // MARK: - Service with Fallback
     static func makeWithFallback() -> DetectionService {
         if FeatureFlags.useMLDetection {
-            do {
-                let service = makeMLDetectionService()
-                return service
-            } catch {
-                if FeatureFlags.enableFallback {
-                    return makeCVDetectionService()
-                }
-            }
+            let mlService = makeMLDetectionService()
+            if let mlService = mlService as? MLDetectionService, !mlService.isModelAvailable && FeatureFlags.enableFallback {
+                return makeCVDetectionService()
+            }
+            return mlService
         } else if FeatureFlags.useONNXDetection {
-            do {
-                let service = makeONNXDetectionService()
-                return service
-            } catch {
-                if FeatureFlags.enableFallback {
-                    return makeCVDetectionService()
-                }
-            }
+            #if canImport(ONNXRuntime) || true
+            return makeONNXDetectionService()
+            #else
+            if FeatureFlags.enableFallback {
+                return makeCVDetectionService()
+            }
+            return makeCVDetectionService()
+            #endif
         }
         
         return makeCVDetectionService()
@@ -62,7 +62,9 @@ class DetectionFactory {
         case is MLDetectionService:
             return (service as! MLDetectionService).isModelAvailable
         case is CVDentitionService:
             return true // CV service is always available
+        #if canImport(ONNXRuntime) || true
         case is ONNXDetectionService:
             return true // ONNX service is always available
+        #endif
         default:
             return false
         }
@@ -75,7 +77,9 @@ class DetectionFactory {
         case is MLDetectionService:
             let mlService = service as! MLDetectionService
             return "ML Detection Service - \(mlService.modelStatus)"
         case is CVDentitionService:
             return "CV Detection Service - Available"
+        #if canImport(ONNXRuntime) || true
         case is ONNXDetectionService:
             return "ONNX Detection Service - Available"
+        #endif
         default:
             return "Unknown Service"
         }
@@ -85,7 +89,9 @@ class DetectionFactory {
     static func compareServices() -> String {
         let mlService = MLDetectionService()
+        #if canImport(ONNXRuntime) || true
         let onnxService = ONNXDetectionService()
+        #endif
         let _ = CVDentitionService()
         
         var comparison = "Service Comparison:\n"
         comparison += "‚Ä¢ ML Service: \(mlService.isModelAvailable ? "Available" : "Not Available")\n"
+        #if canImport(ONNXRuntime) || true
         comparison += "‚Ä¢ ONNX Service: Available\n"
+        #endif
         comparison += "‚Ä¢ CV Service: Available\n"
         comparison += "‚Ä¢ Current Selection: \(FeatureFlags.useMLDetection ? "ML" : "CV")\n"
         comparison += "‚Ä¢ Fallback Enabled: \(FeatureFlags.enableFallback)"
@@ -130,7 +136,9 @@ extension DetectionFactory {
         let mlService = MLDetectionService()
         results["ML"] = testDetection(service: mlService, image: image)
         
+        #if canImport(ONNXRuntime) || true
         // Test ONNX Service
         let onnxService = ONNXDetectionService()
         results["ONNX"] = testDetection(service: onnxService, image: image)
+        #endif
         
         // Test CV Service
         let cvService = CVDentitionService()
@@ -170,7 +178,9 @@ extension DetectionFactory {
         if service is MLDetectionService {
             // ML-specific configuration could go here
             print("Configuring ML Detection Service")
+        #if canImport(ONNXRuntime) || true
         } else if service is ONNXDetectionService {
             // ONNX-specific configuration could go here
             print("Configuring ONNX Detection Service")
+        #endif
         } else if service is CVDentitionService {
             // CV-specific configuration could go here
             print("Configuring CV Detection Service")
@@ -187,7 +197,9 @@ extension DetectionFactory {
                 "Confidence scoring"
             ]
+        #if canImport(ONNXRuntime) || true
         case is ONNXDetectionService:
             return [
                 "ONNX model inference",
                 "Cross-platform compatibility",
                 "Fast processing",
                 "Confidence scoring"
             ]
+        #endif
         case is CVDentitionService:
             return [
                 "Computer vision detection",

--- a/DentalAI/Services/DataManager.swift
+++ b/DentalAI/Services/DataManager.swift
@@ -130,20 +130,35 @@ class DataManager: ObservableObject {
     }
     
     func clearAllAnalysisHistory() {
-        // Clear UserDefaults keys
-        userDefaults.removeObject(forKey: Keys.analysisHistory)
-        userDefaults.removeObject(forKey: "lastAnalysisResults")
-        userDefaults.removeObject(forKey: "recentDetections")
-        
-        // Clear Application Support directory
-        let appSupportURL = fileManager.urls(for: .applicationSupportDirectory, in: .userDomainMask).first!
-        let dentalAIDirectory = appSupportURL.appendingPathComponent("DentalAI")
-        let analysisDirectory = dentalAIDirectory.appendingPathComponent("Analysis")
-        
-        do {
-            try fileManager.removeItem(at: analysisDirectory)
-            #if DEBUG
-            print("üóëÔ∏è Cleared Application Support Analysis directory")
-            #endif
-        } catch {
-            #if DEBUG
-            print("‚ö†Ô∏è Could not clear Analysis directory: \(error)")
-            #endif
-        }
+        let defaults = UserDefaults.standard
+        let fm = FileManager.default
+        
+        // Clear UserDefaults keys
+        defaults.removeObject(forKey: Keys.analysisHistory)
+        defaults.removeObject(forKey: "lastAnalysisResults")
+        defaults.removeObject(forKey: "recentDetections")
+        
+        // Clear Application Support directory safely
+        guard let appSupportURL = fm.urls(for: .applicationSupportDirectory, in: .userDomainMask).first else {
+            #if DEBUG
+            print("‚ö†Ô∏è Could not get Application Support directory")
+            #endif
+            return
+        }
+        
+        let dentalAIDirectory = appSupportURL.appendingPathComponent("DentalAI")
+        let analysisDirectory = dentalAIDirectory.appendingPathComponent("Analysis")
+        
+        // Only delete if directory exists
+        if fm.fileExists(atPath: analysisDirectory.path) {
+            do {
+                try fm.removeItem(at: analysisDirectory)
+                #if DEBUG
+                print("üóëÔ∏è Cleared Application Support Analysis directory")
+                #endif
+            } catch {
+                #if DEBUG
+                print("‚ö†Ô∏è Could not clear Analysis directory: \(error)")
+                #endif
+            }
+        }
+        
+        // Recreate empty directory for future writes
+        do {
+            try fm.createDirectory(at: analysisDirectory, withIntermediateDirectories: true)
+        } catch {
+            #if DEBUG
+            print("‚ö†Ô∏è Could not recreate Analysis directory: \(error)")
+            #endif
+        }
     }

--- a/DentalAI.xcodeproj/project.pbxproj
+++ b/DentalAI.xcodeproj/project.pbxproj
@@ -430,7 +430,8 @@
 				DEVELOPMENT_TEAM = N6Z58D98K3;
 				ENABLE_PREVIEWS = YES;
-				GENERATE_INFOPLIST_FILE = YES;
-				INFOPLIST_KEY_NSCameraUsageDescription = "DentalAI needs access to your camera to capture photos of your teeth for AI-powered dental health analysis. This helps provide personalized recommendations for your oral health.";
-				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "DentalAI needs access to your photo library to analyze existing photos of your teeth for dental health assessment.";
-				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
-				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
-				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
-				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
-				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
+				GENERATE_INFOPLIST_FILE = NO;
+				INFOPLIST_FILE = DentalAI/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 17.0;
 				LD_RUNPATH_SEARCH_PATHS = (
 					"$(inherited)",
@@ -462,7 +463,8 @@
 				DEVELOPMENT_TEAM = N6Z58D98K3;
 				ENABLE_PREVIEWS = YES;
-				GENERATE_INFOPLIST_FILE = YES;
-				INFOPLIST_KEY_NSCameraUsageDescription = "DentalAI needs access to your camera to capture photos of your teeth for AI-powered dental health analysis. This helps provide personalized recommendations for your oral health.";
-				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "DentalAI needs access to your photo library to analyze existing photos of your teeth for dental health assessment.";
-				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
-				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
-				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
-				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
-				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
+				GENERATE_INFOPLIST_FILE = NO;
+				INFOPLIST_FILE = DentalAI/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 17.0;
 				LD_RUNPATH_SEARCH_PATHS = (
 					"$(inherited)",

--- a/DentalAI/Info.plist
+++ b/DentalAI/Info.plist
@@ -22,18 +22,6 @@
 	<key>NSPhotoLibraryAddUsageDescription</key>
 	<string>DentalAI needs permission to save analyzed photos to your photo library for your records.</string>
-	<key>UIApplicationSceneManifest</key>
-	<dict>
-		<key>UIApplicationSupportsMultipleScenes</key>
-		<false/>
-		<key>UISceneConfigurations</key>
-		<dict>
-			<key>UIWindowSceneSessionRoleApplication</key>
-			<array>
-				<dict>
-					<key>UISceneConfigurationName</key>
-					<string>Default Configuration</string>
-					<key>UISceneDelegateClassName</key>
-					<string>$(PRODUCT_MODULE_NAME).SceneDelegate</string>
-				</dict>
-			</array>
-		</dict>
-	</dict>
 </dict>
 </plist>

--- a/DentalAI/ContentView.swift
+++ b/DentalAI/ContentView.swift
@@ -40,6 +40,7 @@ struct ContentView: View {
             .tabItem {
                 Image(systemName: "house.fill")
                 Text("Home")
             }
+            .accessibilityIdentifier("tab.home")
             .tag(0)
             
             // History Tab
@@ -48,6 +49,7 @@ struct ContentView: View {
                 .tabItem {
                     Image(systemName: "clock.fill")
                     Text("History")
                 }
+                .accessibilityIdentifier("tab.history")
                 .tag(1)
             
             // Profile Tab
@@ -57,6 +59,7 @@ struct ContentView: View {
                 .tabItem {
                     Image(systemName: "person.fill")
                     Text("Profile")
                 }
+                .accessibilityIdentifier("tab.profile")
                 .tag(2)
         }
         .accentColor(.blue)
@@ -201,6 +204,7 @@ struct ContentView: View {
             Text("Welcome to DentalAI")
                 .font(.title2)
                     .fontWeight(.bold)
                 .foregroundColor(.primary)
+                .accessibilityIdentifier("title.dentalai")
                 
             Text("Your AI-powered dental health companion")
                 .font(.subheadline)
@@ -263,6 +267,7 @@ struct ContentView: View {
                     HStack {
                         Image(systemName: "camera.fill")
                         Text("Take Photo")
                     }
                     .font(.headline)
+                    .accessibilityIdentifier("btn.takePhoto")
                     .foregroundColor(.white)
                     .frame(maxWidth: .infinity)
                     .padding()
@@ -280,6 +285,7 @@ struct ContentView: View {
                     HStack {
                         Image(systemName: "photo.on.rectangle")
                         Text("Choose from Library")
                     }
                     .font(.headline)
+                    .accessibilityIdentifier("btn.chooseLibrary")
                     .foregroundColor(.blue)
                     .frame(maxWidth: .infinity)
                     .padding()

--- a/DentalAITests/DentalAIUITests.swift
+++ b/DentalAITests/DentalAIUITests.swift
@@ -18,7 +18,7 @@ class DentalAIUITests: XCTestCase {
     // MARK: - Launch Tests
     func testAppLaunch() throws {
         XCTAssertTrue(app.wait(for: .runningForeground, timeout: 5))
-        XCTAssertTrue(app.navigationBars["ü¶∑ DentalAI"].exists)
+        XCTAssertTrue(app.staticTexts["title.dentalai"].exists)
     }
     
     // MARK: - Smoke Test - Core Functionality
@@ -27,15 +27,15 @@ class DentalAIUITests: XCTestCase {
         XCTAssertTrue(app.wait(for: .runningForeground, timeout: 5))
         
         // Verify main UI elements exist
-        XCTAssertTrue(app.buttons["Take Photo"].exists)
-        XCTAssertTrue(app.buttons["Choose from Library"].exists)
+        XCTAssertTrue(app.buttons["btn.takePhoto"].exists)
+        XCTAssertTrue(app.buttons["btn.chooseLibrary"].exists)
         
         // Verify tab navigation works
-        app.tabBars.buttons["History"].tap()
-        XCTAssertTrue(app.navigationBars["üìã History"].exists)
+        app.tabBars.buttons["tab.history"].tap()
+        XCTAssertTrue(app.wait(for: .runningForeground, timeout: 2))
         
-        app.tabBars.buttons["Profile"].tap()
-        XCTAssertTrue(app.navigationBars["üë§ Profile"].exists)
+        app.tabBars.buttons["tab.profile"].tap()
+        XCTAssertTrue(app.wait(for: .runningForeground, timeout: 2))
         
-        app.tabBars.buttons["Home"].tap()
-        XCTAssertTrue(app.navigationBars["ü¶∑ DentalAI"].exists)
+        app.tabBars.buttons["tab.home"].tap()
+        XCTAssertTrue(app.wait(for: .runningForeground, timeout: 2))
     }
@@ -70,7 +70,7 @@ class DentalAIUITests: XCTestCase {
     
     func testCaptureButton() throws {
-        let captureButton = app.buttons["Take Photo"]
+        let captureButton = app.buttons["btn.takePhoto"]
         XCTAssertTrue(captureButton.exists)
         XCTAssertTrue(captureButton.isEnabled)
     }
     
     func testPhotoLibraryButton() throws {
-        let photoLibraryButton = app.buttons["Choose from Library"]
+        let photoLibraryButton = app.buttons["btn.chooseLibrary"]
         XCTAssertTrue(photoLibraryButton.exists)
         XCTAssertTrue(photoLibraryButton.isEnabled)
     }
