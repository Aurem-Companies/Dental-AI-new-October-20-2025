name: iOS CI
on: [push, pull_request]

jobs:
  build:
    runs-on: macos-14
    env:
      SCHEME: DentalAI
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Show Xcode + SDKs
        run: |
          set -x
          xcodebuild -version || true
          xcodebuild -showsdks || true

      - name: List schemes (project only)
        run: |
          set -x
          : > build.log
          echo "== PROJECT SCHEMES ==" | tee -a build.log
          xcodebuild -list -project DentalAI.xcodeproj 2>&1 | tee -a build.log || true

      - name: Detect container
        id: detect
        run: |
          set -euo pipefail
          echo "ws=-project DentalAI.xcodeproj" >> $GITHUB_OUTPUT
          echo "scheme=DentalAI" >> $GITHUB_OUTPUT
          echo "Using project: DentalAI.xcodeproj" | tee -a build.log

      - name: Resolve packages
        run: |
          set -o pipefail
          xcodebuild -project DentalAI.xcodeproj \
            -scheme "${{ env.SCHEME }}" \
            -resolvePackageDependencies 2>&1 | tee -a build.log

      - name: Validate Model Bundle
        run: |
          echo "🔍 Validating compiled CoreML model..."
          MODEL_NAME="DentalDetectionModel"
          MODEL_PATH="DentalAI.app/models/${MODEL_NAME}.mlmodelc"
          
          if [ ! -d "$MODEL_PATH" ]; then
            echo "❌ Compiled model not found at: $MODEL_PATH"
            echo "💡 Make sure your .mlmodel is in Copy Bundle Resources"
            exit 1
          fi
          echo "✅ Found compiled model at: $MODEL_PATH"

      - name: Build (generic simulator, no signing)
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -o pipefail
          : > build.log
          xcodebuild -project DentalAI.xcodeproj \
            -scheme "${{ env.SCHEME }}" \
            -destination 'generic/platform=iOS Simulator' \
            -sdk iphonesimulator \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            clean build 2>&1 | tee -a build.log

      - name: Show first error (if any)
        if: failure()
        run: |
          echo "----- FIRST ERROR CONTEXT -----"
          awk '/^error:|^fatal error:/ {print; exit}' build.log || true
          echo "----- LAST 150 LINES -----"
          tail -n 150 build.log || true

      - name: Upload build.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ./build.log