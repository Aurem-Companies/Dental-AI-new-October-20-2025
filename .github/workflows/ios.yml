name: iOS CI
on: [push, pull_request]
jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Show Xcode + SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      - name: List schemes
        run: |
          chmod +x scripts/ci_list_schemes.sh || true
          ./scripts/ci_list_schemes.sh || true

      - name: Detect workspace/project + scheme
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ -e "DentalAI.xcworkspace" ]; then
            echo "ws=-workspace DentalAI.xcworkspace" >> $GITHUB_OUTPUT
            SCHEME=$(xcodebuild -list -workspace DentalAI.xcworkspace 2>/dev/null | awk -v RS= -F'\n' '/Schemes:/{getline; gsub(/^[ \t]+|[ \t]+$/,""); print; exit}')
          else
            echo "ws=-project DentalAI.xcodeproj" >> $GITHUB_OUTPUT
            SCHEME=$(xcodebuild -list -project DentalAI.xcodeproj 2>/dev/null | awk -v RS= -F'\n' '/Schemes:/{getline; gsub(/^[ \t]+|[ \t]+$/,""); print; exit}')
          fi
          echo "scheme=${SCHEME}" >> $GITHUB_OUTPUT
          if [ -z "${SCHEME}" ]; then
            echo "::error ::No shared scheme detected. Ensure DentalAI.xcodeproj/xcshareddata/xcschemes/*.xcscheme is committed."
            exit 65
          fi
          echo "Detected scheme: ${SCHEME}"

      - name: Resolve packages
        run: |
          xcodebuild ${{ steps.detect.outputs.ws }} \
            -scheme "${{ steps.detect.outputs.scheme }}" \
            -resolvePackageDependencies

      - name: Build (generic simulator, no signing)
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -o pipefail
          : > build.log
          xcodebuild ${{ steps.detect.outputs.ws }} \
            -scheme "${{ steps.detect.outputs.scheme }}" \
            -destination 'generic/platform=iOS Simulator' \
            -sdk iphonesimulator \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            clean build 2>&1 | tee -a build.log

      - name: Show first error (if any)
        if: failure()
        run: |
          echo "----- FIRST ERROR CONTEXT -----"
          awk '/^error:|^fatal error:/ {print; exit}' build.log || true
          echo "----- LAST 120 LINES -----"
          tail -n 120 build.log || true

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log